alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 100
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 10
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
set.seed(1)
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 100
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 10
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
set.seed(1)
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 100
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 10
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 100
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 10
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 100
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 10
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 2, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 1000
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
res$rejs
pvals <- 1 - pnorm(zvals)
which(p.adjust(p = pvals, method = "BH") <= alpha)
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
# Generate mu and Sigma for an AR process
n <- 1000
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
if(all(sort(resdBH) == sort(resBH)){print("match")}
sort(resdBH)
# Generate mu and Sigma for an AR process
n <- 1000
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
if(all(sort(resdBH) == sort(resBH))){print("match")}
}
warnings()
# Generate mu and Sigma for an AR process
n <- 1000
rho <- 0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
if(all(length(resdBH) == length(resBH))){print("match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
if(all(length(resdBH) == length(resBH))){print("match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(i)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
i
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(i)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(i in 1:1000){
print(i)
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(i)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(j in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "right", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(j)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(j in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "two", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 1 - pnorm(zvals)
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(j)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
resdBH
resBH
Sigma
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(j in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "two", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 2*pnorm(-abs(zvals))
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(j)
if(all(length(resdBH) != length(resBH))){print("NOT match")}
}
# Generate mu and Sigma for an AR process
n <- 1000
rho <- -0.8
Sigma <- rho^(abs(outer(1:n, 1:n, "-")))
mu1 <- 2.5
nalt <- 100
mu <- c(rep(mu1, nalt), rep(0, n - nalt))
for(j in 1:1000){
# Generate the z-values
zvals <- rep(NA, n)
zvals[1] <- rnorm(1)
for (i in 2:n){
zvals[i] <- zvals[i - 1] * rho + rnorm(1) * sqrt(1 - rho^2)
}
zvals <- zvals + mu
# Run dBH_1(\alpha) for one-sided tests
alpha <- 0.05
res <- dBH_mvgauss(zvals = zvals, Sigma = Sigma, side = "two", alpha = alpha,
gamma = 1, niter = 1, avals_type = "BH")
resdBH <- res$rejs
pvals <- 2*pnorm(-abs(zvals))
resBH <- which(p.adjust(p = pvals, method = "BH") <= alpha)
print(j)
if(all(length(resdBH) != length(resBH))){
print("NOT match")
print(c(length(resdBH),length(resBH)) )
}
}
library(ggplot2)
library(latex2exp)
#setwd("G:/My Drive/zdirect/simResults/bimodal/")
setwd("/Users/ninht/Library/CloudStorage/GoogleDrive-ninhtran021998@gmail.com/My Drive/zdirect/SmallDependenceSimResults/simResults2/bimodal")
method_choice = c(
"zdirect",
"Storey",
"StoreyAdaptive",
"BH",
"ash",
"lfsr",
"GR",
"dBH")
method_names = c(
"zdirect",
"Storey",
"StoreyAdaptive",
"BH",
"ash",
"lfsr",
"GR",
"dBH")
method_labels = c(
"ZDIRECT",
"Storey_dir",
"aStorey_dir",
"BH_dir",
"ASH",
"LFSR",
"GR",
"dBH")
method_colors = c(
"red",
"purple", "#00BCE3",
"blue", "lightgreen",  "plum4", "orange", "hotpink"
)
names(method_colors) = method_names
method_labels = unname(TeX(c("ZDIRECT", "$STS_{dir}$", "$aSTS_{dir}$", "$BH_{dir}$", "ASH", "LFSR", "GR", "dBH" )))
scale_shape_values = 0:(length(method_names)-1)
scale_linetype_values = c(1,1,1, 2:(length(method_names)-2))
nullprop_choice = c(0, 0.2,  0.5, 0.8)
symm_choice = c(0.5, 0.75, 1)
mu_choice = seq(0.5, 2.5, by = 0.5)
nullprop_vec = c()
mu_vec = c()
symm_vec = c()
method_vec = c()
FDR = c()
TPR = c()
for (nullprop in nullprop_choice){
for(mu in mu_choice){
for (symm in symm_choice){
for (method in method_choice){
filepath = paste(
"/nullprop", nullprop,
"mu", mu,
"symm", symm ,
".RData", sep = "" )
load(paste0( getwd(),  filepath))
nullprop_vec  = c(nullprop_vec , nullprop)
mu_vec  = c(mu_vec , mu)
symm_vec = c(symm_vec, symm)
method_vec = c(method_vec, method)
FDR = c( FDR,  mean(eval(as.symbol(paste0("FDP_",  method)))))
TPR = c( TPR,  mean(eval(as.symbol(paste0("TPP_",  method)))))
}
}
}
}
data = data.frame(nullprop_vec, mu_vec, symm_vec, method_vec, FDR, TPR)
data
